{"version":3,"sources":["../../server/controller/eventController.js"],"names":["eventController","req","res","getAll","i","length","parseInt","body","id","json","message","error","push","params","eventId","eventType","eventLocation","state","date","status","remove","getOne"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA;AACA;;;IAGMA,e;;;;;;;;AACJ;;;;;;iCAMoBC,G,EAAKC,G,EAAK;AAC5B,oCAAgBC,MAAhB,uBAA8BF,GAA9B,EAAmCC,GAAnC;AACD;;AAED;;;;;;;;;6BAMgBD,G,EAAKC,G,EAAK;AACxB;AACA,WAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,qBAAMC,MAA1B,EAAkCD,KAAK,CAAvC,EAA0C;AACxC,YAAIE,SAASL,IAAIM,IAAJ,CAASC,EAAlB,EAAsB,EAAtB,MAA8B,qBAAMJ,CAAN,EAASI,EAA3C,EAA+C;AAC7C,iBAAON,IAAIO,IAAJ,CAAS;AACdC,qBAAS,2BADK;AAEdC,mBAAO;AAFO,WAAT,CAAP;AAID,SALD,MAKO,IAAI,CAACV,IAAIM,IAAJ,CAASC,EAAd,EAAkB;AACvB,iBAAON,IAAIO,IAAJ,CAAS;AACdC,qBAAS,sBADK;AAEdC,mBAAO;AAFO,WAAT,CAAP;AAID;AACF;AACD,2BAAMC,IAAN,CAAWX,IAAIM,IAAf;AACA,aAAOL,IAAIO,IAAJ,CAAS;AACdC,iBAAS,SADK;AAEdC,eAAO;AAFO,OAAT,CAAP;AAID;;AAED;;;;;;;;;2BAMcV,G,EAAKC,G,EAAK;AACtB,WAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,qBAAMC,MAA1B,EAAkCD,KAAK,CAAvC,EAA0C;AACxC,YAAI,qBAAMA,CAAN,EAASI,EAAT,KAAgBF,SAASL,IAAIY,MAAJ,CAAWC,OAApB,EAA6B,EAA7B,CAApB,EAAsD;AACpD,+BAAMV,CAAN,EAASW,SAAT,GAAqBd,IAAIM,IAAJ,CAASQ,SAA9B;AACA,+BAAMX,CAAN,EAASY,aAAT,GAAyBf,IAAIM,IAAJ,CAASS,aAAlC;AACA,+BAAMZ,CAAN,EAASa,KAAT,GAAiBhB,IAAIM,IAAJ,CAASU,KAA1B;AACA,+BAAMb,CAAN,EAASc,IAAT,GAAgBjB,IAAIM,IAAJ,CAASW,IAAzB;AACA,iBAAOhB,IAAIO,IAAJ,CAAS;AACdC,qBAAS,mBADK;AAEdC,mBAAO;AAFO,WAAT,CAAP;AAID;AACF;AACD,aAAOT,IAAIiB,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AAC1BC,iBAAS,WADiB;AAE1BC,eAAO;AAFmB,OAArB,CAAP;AAID;;AAED;;;;;;;;;2BAMcV,G,EAAKC,G,EAAK;AACtB,oCAAgBkB,MAAhB,uBAA8BnB,GAA9B,EAAmCC,GAAnC;AACD;;AAED;;;;;;;;;6BAMgBD,G,EAAKC,G,EAAK;AACxB,oCAAgBmB,MAAhB,uBAA8BpB,GAA9B,EAAmCC,GAAnC;AACD;;;;;;kBAIYF,e","file":"eventController.js","sourcesContent":["import event from './../model/eventModel';\r\nimport controlFunction from './controllerFunctions';\r\n\r\n// class eventController class\r\n/**\r\n * it is a class that control all event method;\r\n */\r\nclass eventController {\r\n  /**\r\n   * it GET all events\r\n   * @param {string} req\r\n   * @param {string} res\r\n   * @returns {object} all events\r\n   */\r\n  static getAllEvents(req, res) {\r\n    controlFunction.getAll(event, req, res);\r\n  }\r\n\r\n  /**\r\n   * it ADD an event\r\n   * @param {string} req\r\n   * @param {string} res\r\n   * @returns {object} add event\r\n   */\r\n  static addEvent(req, res) {\r\n    // addEvent method\r\n    for (let i = 0; i < event.length; i += 1) {\r\n      if (parseInt(req.body.id, 10) === event[i].id) {\r\n        return res.json({\r\n          message: 'event id already existing',\r\n          error: true\r\n        });\r\n      } else if (!req.body.id) {\r\n        return res.json({\r\n          message: 'event id is required',\r\n          error: true\r\n        });\r\n      }\r\n    }\r\n    event.push(req.body);\r\n    return res.json({\r\n      message: 'Success',\r\n      error: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * it PUT all events\r\n   * @param {string} req\r\n   * @param {string} res\r\n   * @returns {object} PUT(update) event\r\n   */\r\n  static update(req, res) {\r\n    for (let i = 0; i < event.length; i += 1) {\r\n      if (event[i].id === parseInt(req.params.eventId, 10)) {\r\n        event[i].eventType = req.body.eventType;\r\n        event[i].eventLocation = req.body.eventLocation;\r\n        event[i].state = req.body.state;\r\n        event[i].date = req.body.date;\r\n        return res.json({\r\n          message: 'Update Successful',\r\n          error: false\r\n        });\r\n      }\r\n    }\r\n    return res.status(404).json({\r\n      message: 'not found',\r\n      error: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * it DELETE all events\r\n   * @param {string} req\r\n   * @param {string} res\r\n   * @returns {object} remove an event\r\n   */\r\n  static remove(req, res) {\r\n    controlFunction.remove(event, req, res);\r\n  }\r\n\r\n  /**\r\n   * it GET an event\r\n   * @param {string} req\r\n   * @param {string} res\r\n   * @returns {object} an event\r\n   */\r\n  static getEvent(req, res) {\r\n    controlFunction.getOne(event, req, res);\r\n  }\r\n}\r\n\r\n\r\nexport default eventController;\r\n"]}