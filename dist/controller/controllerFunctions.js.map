{"version":3,"sources":["../../server/controller/controllerFunctions.js"],"names":["getAll","element","req","res","length","json","result","error","message","add","i","body","id","push","update","parseInt","params","name","cost","status","remove","splice","getOne"],"mappings":"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","file":"controllerFunctions.js","sourcesContent":["const getAll = (element, req, res) => {\r\n  if (element.length > 0) {\r\n    return res.json({\r\n      result: element,\r\n      error: false\r\n    });\r\n  }\r\n  return res.json({\r\n    message: 'not found, it is empty',\r\n    error: true\r\n  });\r\n};\r\n\r\nconst add = (element, req, res) => {\r\n  for (let i = 0; i < element.length; i += 1) {\r\n    if (req.body.id === element[i].id) {\r\n      return res.json({\r\n        message: \"the 'id' already existing\",\r\n        error: true\r\n      });\r\n    } else if (!req.body.id) {\r\n      return res.json({\r\n        message: \"the 'id' is required\",\r\n        error: true\r\n      });\r\n    }\r\n  }\r\n  element.push(req.body);\r\n  return res.json({\r\n    message: 'Success',\r\n    error: false\r\n  });\r\n};\r\n\r\nconst update = (element, req, res) => {\r\n  for (let i = 0; i < element.length; i += 1) {\r\n    if (element[i].id === parseInt(req.params.id, 10)) {\r\n      element[i].name = req.body.name;\r\n      element[i].cost = req.body.cost;\r\n      return res.json({\r\n        message: 'Update Successful',\r\n        error: false\r\n      });\r\n    }\r\n  }\r\n  return res.status(404).json({\r\n    message: 'not found',\r\n    error: true\r\n  });\r\n};\r\n\r\nconst remove = (element, req, res) => {\r\n  for (let i = 0; i < element.length; i += 1) {\r\n    if (element[i].id === parseInt(req.params.id, 10)) {\r\n      element.splice(i, 1);\r\n      return res.json({\r\n        message: 'Success',\r\n        error: false\r\n      });\r\n    }\r\n  }\r\n  return res.status(404).json({\r\n    message: 'not found',\r\n    error: true\r\n  });\r\n};\r\n\r\nconst getOne = (element, req, res) => {\r\n  for (let i = 0; i < element.length; i += 1) {\r\n    if (element[i].id === parseInt(req.params.id, 10)) {\r\n      return res.json({\r\n        result: element[i],\r\n        message: 'Success',\r\n        error: false\r\n      });\r\n    }\r\n  }\r\n  return res.status(404).json({\r\n    message: 'not found',\r\n    error: true\r\n  });\r\n};\r\n\r\nexport default {\r\n  getAll, add, update, remove, getOne\r\n};\r\n"]}